// Generated by CoffeeScript 1.3.3
var app, echonest, express, http, implodeArtists, io, nest, server, settings, spotify;

express = require('express');

spotify = require('spotify');

echonest = require('echonest');

settings = require('./settings');

http = require('http');

app = express();

server = app.listen(settings.port);

io = require('socket.io').listen(server);

app.use(express["static"](__dirname + '/static'));

app.use(express.bodyParser());

nest = new echonest.Echonest({
  api_key: 'PCG7Z9OEOD91S20SU'
});

implodeArtists = function(artists) {
  var artist, first, string, _i, _len;
  first = true;
  for (_i = 0, _len = artists.length; _i < _len; _i++) {
    artist = artists[_i];
    if (first) {
      string = artist.name;
      first = false;
    } else {
      string += ", " + artist.name;
    }
  }
  return string;
};

io.on('connection', function(socket) {
  socket.on('nextTrack', function() {
    return socket.broadcast.emit('nextTrack');
  });
  socket.on('addTrack', function(data) {
    return socket.broadcast.emit('newTrack', data);
  });
  socket.on('trackInfo', function(id, fn) {
    console.log(id);
    return spotify.lookup({
      type: 'track',
      id: id.replace('spotify-WW:track:', '')
    }, function(err, res) {
      return fn({
        album: res.track.album.name
      });
    });
  });
  return socket.on('reqSug', function(fn) {
    console.log('load from cache');
    return fn(require('./suggestions.json'));
    /*
    		nest.song.search { 
    			results: '25',
    			sort: 'song_hotttnesss-desc',
    			bucket: ['id:spotify-WW', 'tracks']
    		}, (error, response) ->
    			suggestionData = []
    					#spotify.lookup { type: 'track', id: response.songs[0].id }, (err, res) ->
    						#console.log res
    			`for( i = 0; i < response.songs.length; i++ ) {
    				if( response.songs[i].tracks.length === 0 ) {
    					//response.songs.splice(i, 1);
    					//i--;
    				} else {
    					
    					//console.log(response.songs[i]);
    					//console.log(i, response.songs.length
    					//socket.emit('sugTrack', { artist: response.songs[i].artist_name, title: response.songs[i].title, spotify: response.songs[i].tracks[0].foreign_id, last: i == response.songs.length - 1 });
    					//console.log(response.songs[i]);
    					suggestionData.push({ artist: response.songs[i].artist_name, title: response.songs[i].title, spotify: response.songs[i].tracks[0].foreign_id, album: '' });
    						
    					//console.log('hoi');
    				}
    			}`
    
    			#console.log JSON.stringifi(suggestionData)
    			fn suggestionData
    			return true
    */

  });
});

/*
spotify.get  '/lookup/1/.json?uri=spotify:artist:4YrKBkKSVeqDamzBPWVnSJ', (err, res) ->
	console.log res
*/


app.post('/search', function(req, res) {
  var tracks;
  tracks = [];
  return spotify.search({
    type: 'track',
    query: req.body.query
  }, function(err, result) {
    var track, _i, _len, _ref;
    _ref = result.tracks;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      track = _ref[_i];
      tracks.push({
        title: track.name,
        artist: implodeArtists(track.artists),
        album: track.album.name
      });
    }
    console.log(tracks);
    return res.json(tracks);
  });
  /*
  	nest.song.search { 
  		combined: req.body.query,
  		results: '5',
  		sort: 'song_hotttnesss-desc',
  		bucket: ['id:spotify-WW', 'tracks']
  	}, (error, response) ->
  		console.log error
  		#console.log response
  
  		tracks = []
  		
  		`for( i = 0; i < response.songs.length; i++ ) {
  			if( response.songs[i].tracks.length === 0 ) {
  				//response.songs.splice(i, 1);
  				//i--;
  			} else {
  				tracks.push( { 
  					artist: response.songs[i].artist_name,
  					title: response.songs[i].title,
  					spotify: response.songs[i].tracks[0].foreign_id,
  					album: ''
  				} );
  			}
  
  		}`
  
  		console.log tracks
  		res.json tracks
  */

});

app.post('/suggestions', function(req, res) {
  var spotList;
  spotList = [];
  return nest.song.search({
    results: '25',
    sort: 'song_hotttnesss-desc',
    bucket: ['id:spotify-WW', 'tracks']
  }, function(error, response) {
    for( i = 0; i < response.songs.length; i++ ) {
			if( response.songs[i].tracks.length === 0 ) {
				response.songs.splice(i, 1);
				i--;
			}
		};
    return res.json(response.songs);
  });
});
